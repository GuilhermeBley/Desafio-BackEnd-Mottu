// <auto-generated />
using System;
using Bl.Mottu.Maintenance.Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bl.Mottu.Maintenance.Infrastructure.Migrations
{
    [DbContext(typeof(PostgreDataContext))]
    partial class PostgreDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bl.Mottu.Maintenance.Core.Model.DeliveryDriverModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("CnhCategory")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cnh_category");

                    b.Property<string>("CnhImg")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("cnh_img");

                    b.Property<string>("CnhNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cnh_number");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("uq_DeliveryDriver_Cnpj");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("uq_DeliveryDriver_Code");

                    b.ToTable("DeliveryDriver", (string)null);
                });

            modelBuilder.Entity("Bl.Mottu.Maintenance.Core.Model.MotorcycleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("model");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("placa");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("uq_Motorcycle_Code");

                    b.HasIndex("Placa")
                        .IsUnique()
                        .HasDatabaseName("uq_Motorcycle_Placa");

                    b.ToTable("Motorcycle", (string)null);
                });

            modelBuilder.Entity("Bl.Mottu.Maintenance.Core.Model.VehicleRentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("DailyValue")
                        .HasColumnType("NUMERIC(11, 2)")
                        .HasColumnName("daily_value");

                    b.Property<Guid>("DeliveryDriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("delivery_driver_id");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<DateTime>("ExpectedEndingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_ending_date");

                    b.Property<int>("Plan")
                        .HasColumnType("int")
                        .HasColumnName("plan");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDriverId")
                        .HasDatabaseName("ix_VehicleRent_DeliveryDriverId");

                    b.HasIndex("EndedAt")
                        .HasDatabaseName("ix_VehicleRent_EndedAt");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_VehicleRent_VehicleId");

                    b.ToTable("VehicleRent", (string)null);
                });

            modelBuilder.Entity("Bl.Mottu.Maintenance.Core.Model.VehicleRentModel", b =>
                {
                    b.HasOne("Bl.Mottu.Maintenance.Core.Model.DeliveryDriverModel", null)
                        .WithMany()
                        .HasForeignKey("DeliveryDriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_VehicleRent_DeliveryDriver");

                    b.HasOne("Bl.Mottu.Maintenance.Core.Model.MotorcycleModel", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_VehicleRent_Motorcycle");
                });
#pragma warning restore 612, 618
        }
    }
}
